`timescale 1ns/1ps
module clock_pro (
    input           clk,
    input           rst_n,
    input   [1:0]   sw_mode,    // 00=正常, 01=设置时间, 10=设置闹钟
    input           sw_field,   // 0=小时, 1=分钟
    input           btn_inc,
    input           btn_dec,
    output          rgb_r,
    output          rgb_g,
    output          rgb_b,
    output reg [7:0] seg,       // [7]=DP active low
    output reg [7:0] an
);

    // ---------------------- 1Hz 分频 ----------------------
    reg [26:0] clk_cnt;
    wire pulse_1hz;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)               clk_cnt <= 0;
        else if (clk_cnt==100_000_000-1) clk_cnt <= 0;
        else                       clk_cnt <= clk_cnt + 1;
    end
    assign pulse_1hz = (clk_cnt == 100_000_000-1);

    // ---------------------- 10Hz 分频 (0.1s tick) ----------------------
    reg [23:0] div10_cnt;
    wire pulse_10hz;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)                div10_cnt <= 0;
        else if (div10_cnt==10_000_000-1) div10_cnt <= 0;
        else                        div10_cnt <= div10_cnt + 1;
    end
    assign pulse_10hz = (div10_cnt == 10_000_000-1);

    // ---------------------- 按键去抖+长按 ----------------------
    reg inc_s0,inc_s1,dec_s0,dec_s1;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) {inc_s0,inc_s1,dec_s0,dec_s1} <= 0;
        else         {inc_s0,inc_s1,dec_s0,dec_s1} <= {btn_inc,inc_s0,btn_dec,dec_s0};
    end
    wire inc_db = inc_s1, dec_db = dec_s1;
    parameter LONG_THR = 27'd50_000_000, REP_INT = 27'd10_000_000;
    reg inc_pressed, dec_pressed;
    reg [26:0] inc_cnt, dec_cnt;
    wire inc_pulse = inc_db && (!inc_pressed || (inc_cnt>=LONG_THR && inc_cnt%REP_INT==0));
    wire dec_pulse = dec_db && (!dec_pressed || (dec_cnt>=LONG_THR && dec_cnt%REP_INT==0));
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) {inc_pressed,inc_cnt,dec_pressed,dec_cnt} <= 0;
        else begin
            if (inc_db) begin inc_pressed<=1; inc_cnt<=inc_cnt+1; end
            else         begin inc_pressed<=0; inc_cnt<=0;       end
            if (dec_db) begin dec_pressed<=1; dec_cnt<=dec_cnt+1; end
            else         begin dec_pressed<=0; dec_cnt<=0;       end
        end
    end

    // ---------------------- 时分秒计数 ----------------------
    reg [5:0] sec, min_cnt;
    reg [4:0] hr_cnt;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)               {sec,min_cnt,hr_cnt} <= 0;
        else begin
            if (sw_mode==2'b00 && pulse_1hz) begin
                if (sec==59) begin sec<=0;
                    if (min_cnt==59) begin min_cnt<=0; hr_cnt<=(hr_cnt==23)?0:hr_cnt+1; end
                    else min_cnt<=min_cnt+1;
                end else sec<=sec+1;
            end else if (sw_mode==2'b01) begin
                if (inc_pulse)
                    if (!sw_field) hr_cnt<=(hr_cnt==23)?0:hr_cnt+1;
                    else           min_cnt<=(min_cnt==59)?0:min_cnt+1;
                if (dec_pulse)
                    if (!sw_field) hr_cnt<=(hr_cnt==0)?23:hr_cnt-1;
                    else           min_cnt<=(min_cnt==0)?59:min_cnt-1;
                sec<=0;
            end else if (sw_mode==2'b10 && pulse_1hz) begin
                // 在闹钟设置模式后台走秒
                if (sec==59) begin sec<=0;
                    if (min_cnt==59) begin min_cnt<=0; hr_cnt<=(hr_cnt==23)?0:hr_cnt+1; end
                    else min_cnt<=min_cnt+1;
                end else sec<=sec+1;
            end
        end
    end

    // ---------------------- 闹钟设置 ----------------------
    reg [4:0] alarm_hr;
    reg [5:0] alarm_min;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)               alarm_hr<=0;
        else if (sw_mode==2'b10 && !sw_field) begin
            if (inc_pulse) alarm_hr<=(alarm_hr==23)?0:alarm_hr+1;
            if (dec_pulse) alarm_hr<=(alarm_hr==0)?23:alarm_hr-1;
        end
    end
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)               alarm_min<=0;
        else if (sw_mode==2'b10 && sw_field) begin
            if (inc_pulse) alarm_min<=(alarm_min==59)?0:alarm_min+1;
            if (dec_pulse) alarm_min<=(alarm_min==0)?59:alarm_min-1;
        end
    end

    // ---------------------- 报时 & 闹钟触发 ----------------------
    reg [3:0] alarm_counter;
    wire alarm_active = (alarm_counter > 0);
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) 
            alarm_counter <= 0;
        else if (pulse_1hz) begin
            // 原闹钟触发条件 + 新增整点报时条件（正常模式每小时整点报时，排除 00:00）
            if (
                (sec==0 && min_cnt==alarm_min && hr_cnt==alarm_hr && (hr_cnt!=0 || min_cnt!=0))
                || (sw_mode==2'b00 && sec==0 && min_cnt==0 && hr_cnt!=0)
            )
                alarm_counter <= 10;  
            else if (alarm_counter > 0)
                alarm_counter <= alarm_counter - 1;
        end
    end

    // ---------------------- 彩色超平滑过渡 & PWM ----------------------
    // 使用高精度色轮实现平滑过渡
    reg [14:0] color_pos; // 更高精度的色轮位置
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) color_pos <= 0;
        else color_pos <= color_pos + 1; // 不管闹钟是否激活都持续变化
    end
    
    wire [9:0] wheel_pos = color_pos[14:5]; // 取高10位作为0-1023范围的色轮位置
    wire [7:0] pos_in_segment = wheel_pos[7:0]; // 0-255位置
    wire [1:0] segment = wheel_pos[9:8]; // 4象限
    
    // 根据象限和位置计算RGB值
    reg [7:0] r_value, g_value, b_value;
    always @(*) begin
        case(segment)
            2'b00: begin // 红→绿
                r_value = 255 - pos_in_segment;
                g_value = pos_in_segment;
                b_value = 0;
            end
            2'b01: begin // 绿→蓝
                r_value = 0;
                g_value = 255 - pos_in_segment;
                b_value = pos_in_segment;
            end
            2'b10: begin // 蓝→红
                r_value = pos_in_segment;
                g_value = 0;
                b_value = 255 - pos_in_segment;
            end
            default: begin // 兼容性处理
                r_value = 255;
                g_value = 0;
                b_value = 0;
            end
        endcase
    end
    
    // PWM生成
    reg [7:0] pwm_cnt;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) pwm_cnt <= 0;
        else pwm_cnt <= pwm_cnt + 1;
    end
    
    // RGB输出 - 仅在闹钟激活时显示
    assign rgb_r = alarm_active ? (pwm_cnt < r_value) : 1'b0;
    assign rgb_g = alarm_active ? (pwm_cnt < g_value) : 1'b0;
    assign rgb_b = alarm_active ? (pwm_cnt < b_value) : 1'b0;

    // ---------------------- 七段显示 ----------------------
    wire [3:0] d0 = sec % 10, d1 = sec / 10;
    wire [3:0] d2 = min_cnt % 10, d3 = min_cnt / 10;
    wire [3:0] d4 = hr_cnt % 10, d5 = hr_cnt / 10;
    wire [3:0] a0 = alarm_min % 10, a1 = alarm_min / 10;
    wire [3:0] a2 = alarm_hr % 10, a3 = alarm_hr / 10;
    function [6:0] seg_map; input [3:0] v; case(v)
        4'd0:seg_map=7'b1000000; 4'd1:seg_map=7'b1111001;
        4'd2:seg_map=7'b0100100; 4'd3:seg_map=7'b0110000;
        4'd4:seg_map=7'b0011001; 4'd5:seg_map=7'b0010010;
        4'd6:seg_map=7'b0000010; 4'd7:seg_map=7'b1111000;
        4'd8:seg_map=7'b0000000; 4'd9:seg_map=7'b0010000;
        default:seg_map=7'b1111111;
    endcase endfunction

    reg [16:0] refresh_cnt;
    reg [2:0]  scan_idx;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)                {refresh_cnt,scan_idx}<=0;
        else if (refresh_cnt==100_000-1) {refresh_cnt,scan_idx}<={17'd0,scan_idx+1};
        else                       refresh_cnt<=refresh_cnt+1;
    end

    always @(*) begin
        an  = 8'hFF;
        seg = 8'hFF;
        case(scan_idx)
            // 英文提示: TM / AL
            3'd7: begin 
                an[7]=0;
                if (sw_mode==2'b01) seg={1'b1,7'b1000111}; // 'T'
                else if (sw_mode==2'b10) seg={1'b1,7'b0001000}; // 'A'
            end
            3'd6: begin 
                an[6]=0;
                if (sw_mode==2'b01) seg={1'b1,7'b1000010}; // 'M'
                else if (sw_mode==2'b10) seg={1'b1,7'b1110001}; // 'L'
            end
            // 时分秒 hh.mm.ss
            3'd5: begin // 小时十位
                an[5]=0;
                if (sw_mode==2'b10) seg={1'b1, seg_map(a3)}; // 闹钟小时十位
                else                seg={1'b1, seg_map(d5)}; // 时间小时十位
            end
            3'd4: begin // 小时个位
                an[4]=0;
                if (sw_mode==2'b10) seg={1'b0, seg_map(a2)}; // 闹钟小时个位，带小数点
                else                seg={1'b0, seg_map(d4)}; // 时间小时个位，带小数点
            end
            3'd3: begin // 分钟十位
                an[3]=0;
                if (sw_mode==2'b10) seg={1'b1, seg_map(a1)}; // 闹钟分钟十位
                else                seg={1'b1, seg_map(d3)}; // 时间分钟十位
            end
            3'd2: begin // 分钟个位
                an[2]=0;
                if (sw_mode==2'b10) seg={1'b0, seg_map(a0)}; // 闹钟分钟个位，带小数点
                else                seg={1'b0, seg_map(d2)}; // 时间分钟个位，带小数点
            end
            3'd1: begin an[1]=0; seg={1'b1, seg_map(d1)}; end // 秒十位
            3'd0: begin an[0]=0; seg={1'b1, seg_map(d0)}; end // 秒个位
        endcase
    end

endmodule